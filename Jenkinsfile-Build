pipeline {
    agent any
    
    environment {
        // Repositorio de desarrollo donde está el código fuente
        DEV_REPO = 'https://github.com/SantiagoAngel007/microservice-app-example.git'
        DEV_BRANCH = 'feature/test-startup'
        
        // Variables de configuración para build
        IMAGE_TAG = "${BUILD_NUMBER}"
        REGISTRY_PREFIX = 'microservices'
    }
    
    stages {
        stage('Checkout Development Code') {
            steps {
                script {
                    echo "Clonando repositorio de desarrollo..."
                    sh "rm -rf microservice-app-example"
                    sh "git clone ${DEV_REPO} microservice-app-example"
                    sh "cd microservice-app-example && git checkout ${DEV_BRANCH}"
                    
                    // Mostrar información del commit
                    sh """
                        cd microservice-app-example
                        echo "Información del commit:"
                        git log --oneline -1
                        echo "Rama: ${DEV_BRANCH}"
                        echo "Tag de imagen: ${IMAGE_TAG}"
                    """
                }
            }
        }
        
        stage('Cleanup Old Images') {
            steps {
                script {
                    echo "Limpiando imágenes anteriores..."
                    sh '''
                        # Remover imágenes previas para build fresco
                        docker rmi ${REGISTRY_PREFIX}/auth-api:latest 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/users-api:latest 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/todos-api:latest 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/log-message-processor:latest 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/frontend:latest 2>/dev/null || true
                        
                        # También limpiar por tag específico
                        docker rmi ${REGISTRY_PREFIX}/auth-api:${IMAGE_TAG} 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/users-api:${IMAGE_TAG} 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/todos-api:${IMAGE_TAG} 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/log-message-processor:${IMAGE_TAG} 2>/dev/null || true
                        docker rmi ${REGISTRY_PREFIX}/frontend:${IMAGE_TAG} 2>/dev/null || true
                    '''
                }
            }
        }
        
        stage('Build Auth API') {
            steps {
                script {
                    echo "Construyendo Auth API..."
                    dir('microservice-app-example/auth-api') {
                        sh """
                            echo "Building Auth API Docker image..."
                            docker build -t ${REGISTRY_PREFIX}/auth-api:latest .
                            docker tag ${REGISTRY_PREFIX}/auth-api:latest ${REGISTRY_PREFIX}/auth-api:${IMAGE_TAG}
                            
                            echo "Auth API imagen creada:"
                            docker images | grep ${REGISTRY_PREFIX}/auth-api
                        """
                    }
                }
            }
        }
        
        stage('Build Users API') {
            steps {
                script {
                    echo "👥 Construyendo Users API..."
                    dir('microservice-app-example/users-api') {
                        sh """
                            echo " Compilando con Maven..."
                            ./mvnw clean package -DskipTests
                            
                            echo "Building Users API Docker image..."
                            docker build -t ${REGISTRY_PREFIX}/users-api:latest .
                            docker tag ${REGISTRY_PREFIX}/users-api:latest ${REGISTRY_PREFIX}/users-api:${IMAGE_TAG}
                            
                            echo "Users API imagen creada:"
                            docker images | grep ${REGISTRY_PREFIX}/users-api
                        """
                    }
                }
            }
        }
        
        stage('Build Todos API') {
            steps {
                script {
                    echo " Construyendo Todos API..."
                    dir('microservice-app-example/todos-api') {
                        sh """
                            echo " Building Todos API Docker image..."
                            docker build -t ${REGISTRY_PREFIX}/todos-api:latest .
                            docker tag ${REGISTRY_PREFIX}/todos-api:latest ${REGISTRY_PREFIX}/todos-api:${IMAGE_TAG}
                            
                            echo " Todos API imagen creada:"
                            docker images | grep ${REGISTRY_PREFIX}/todos-api
                        """
                    }
                }
            }
        }
        
        stage('Build Log Message Processor') {
            steps {
                script {
                    echo " Construyendo Log Message Processor..."
                    dir('microservice-app-example/log-message-processor') {
                        sh """
                            echo " Building Log Processor Docker image..."
                            docker build -t ${REGISTRY_PREFIX}/log-message-processor:latest .
                            docker tag ${REGISTRY_PREFIX}/log-message-processor:latest ${REGISTRY_PREFIX}/log-message-processor:${IMAGE_TAG}
                            
                            echo " Log Processor imagen creada:"
                            docker images | grep ${REGISTRY_PREFIX}/log-message-processor
                        """
                    }
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                script {
                    echo " Construyendo Frontend..."
                    dir('microservice-app-example/frontend') {
                        sh """
                            echo " Building Frontend Docker image..."
                            docker build -t ${REGISTRY_PREFIX}/frontend:latest .
                            docker tag ${REGISTRY_PREFIX}/frontend:latest ${REGISTRY_PREFIX}/frontend:${IMAGE_TAG}
                            
                            echo " Frontend imagen creada:"
                            docker images | grep ${REGISTRY_PREFIX}/frontend
                        """
                    }
                }
            }
        }
        
        stage('Verify All Images') {
            steps {
                script {
                    echo " Verificando que todas las imágenes se crearon correctamente..."
                    sh """
                        echo " Resumen de imágenes creadas:"
                        echo "════════════════════════════════════════════════════════════"
                        docker images | grep ${REGISTRY_PREFIX} | head -10
                        echo "════════════════════════════════════════════════════════════"
                        
                        # Verificar que cada imagen existe
                        docker inspect ${REGISTRY_PREFIX}/auth-api:latest >/dev/null 2>&1 && echo "✅ Auth API: OK" || echo "❌ Auth API: MISSING"
                        docker inspect ${REGISTRY_PREFIX}/users-api:latest >/dev/null 2>&1 && echo "✅ Users API: OK" || echo "❌ Users API: MISSING"
                        docker inspect ${REGISTRY_PREFIX}/todos-api:latest >/dev/null 2>&1 && echo "✅ Todos API: OK" || echo "❌ Todos API: MISSING"
                        docker inspect ${REGISTRY_PREFIX}/log-message-processor:latest >/dev/null 2>&1 && echo "✅ Log Processor: OK" || echo "❌ Log Processor: MISSING"
                        docker inspect ${REGISTRY_PREFIX}/frontend:latest >/dev/null 2>&1 && echo "✅ Frontend: OK" || echo "❌ Frontend: MISSING"
                    """
                }
            }
        }
        
        stage('Image Cleanup') {
            steps {
                script {
                    echo " Limpieza de imágenes intermedias..."
                    sh """
                        # Limpiar imágenes huérfanas del build
                        docker image prune -f
                        
                        echo " Espacio liberado y imágenes finales:"
                        docker system df
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo " Limpiando workspace..."
                sh "rm -rf microservice-app-example"
            }
        }
        
        success {
            echo """
            ¡BUILD COMPLETADO EXITOSAMENTE!
            
            Rama compilada: ${DEV_BRANCH}
            Tag de imágenes: ${IMAGE_TAG}
            
            Imágenes creadas:
            ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
            ${REGISTRY_PREFIX}/auth-api:latest
            ${REGISTRY_PREFIX}/users-api:latest  
            ${REGISTRY_PREFIX}/todos-api:latest
            ${REGISTRY_PREFIX}/log-message-processor:latest
            ${REGISTRY_PREFIX}/frontend:latest
            ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
            
            Próximo paso: Ejecutar Jenkinsfile-Create para crear contenedores
            """
            
            script {
                sh """
                    echo "Tamaño final de imágenes:"
                    docker images | grep ${REGISTRY_PREFIX} | awk '{print \$1\":\"\$2\" - \"\$7}'
                """
            }
        }
        
        failure {
            echo """
            ❌ BUILD FALLIDO
            
            Revisa los logs para identificar qué imagen falló al construirse.
            
            Limpiando imágenes parciales...
            """
            script {
                sh """
                    # Limpiar imágenes que pueden haber quedado a medias
                    docker image prune -f
                    docker images | grep '<none>' | awk '{print \$3}' | xargs -r docker rmi
                """
            }
        }
    }
}