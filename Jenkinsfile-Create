pipeline {
    agent any
    
    environment {
        // Variables de configuraci√≥n
        REGISTRY_PREFIX = 'microservices'
        JWT_SECRET = 'PRFT'
        REDIS_HOST = 'redis'
        REDIS_PORT = '6379'
        REDIS_CHANNEL = 'log_channel'
        
        // Puertos de los servicios
        AUTH_API_PORT = '8000'
        USERS_API_PORT = '8083'
        TODOS_API_PORT = '8082'
        FRONTEND_PORT = '8080'
        
        // Network name
        NETWORK_NAME = 'microservice-network'
    }
    
    stages {
        stage('Verify Images Exist') {
            steps {
                script {
                    echo " Verificando que las im√°genes Docker existan..."
                    
                    def images = [
                        'auth-api',
                        'users-api', 
                        'todos-api',
                        'log-message-processor',
                        'frontend'
                    ]
                    
                    def missingImages = []
                    
                    images.each { image ->
                        def result = sh(
                            script: "docker inspect ${REGISTRY_PREFIX}/${image}:latest >/dev/null 2>&1",
                            returnStatus: true
                        )
                        
                        if (result == 0) {
                            echo "‚úÖ ${REGISTRY_PREFIX}/${image}:latest - EXISTS"
                        } else {
                            echo "‚ùå ${REGISTRY_PREFIX}/${image}:latest - MISSING"
                            missingImages.add(image)
                        }
                    }
                    
                    if (missingImages.size() > 0) {
                        error("‚ùå Faltan las siguientes im√°genes: ${missingImages.join(', ')}. Ejecuta Jenkinsfile-Build primero.")
                    }
                    
                    echo "‚úÖ Todas las im√°genes est√°n disponibles!"
                }
            }
        }
        
        stage('Cleanup Existing Containers') {
            steps {
                script {
                    echo " Limpiando contenedores existentes..."
                    
                    def containers = ['redis', 'auth-api', 'users-api', 'todos-api', 'log-message-processor', 'frontend']
                    
                    containers.each { container ->
                        // Verificar si el contenedor existe y est√° corriendo
                        def isRunning = sh(
                            script: "docker ps -q -f name=${container}",
                            returnStdout: true
                        ).trim()
                        
                        def exists = sh(
                            script: "docker ps -aq -f name=${container}",
                            returnStdout: true
                        ).trim()
                        
                        if (isRunning) {
                            echo "üõë Deteniendo contenedor: ${container}"
                            sh "docker stop ${container}"
                        }
                        
                        if (exists) {
                            echo "üóëÔ∏è Removiendo contenedor: ${container}"
                            sh "docker rm ${container}"
                        }
                    }
                    
                    echo "‚úÖ Limpieza de contenedores completada"
                }
            }
        }
        
        stage('Setup Docker Network') {
            steps {
                script {
                    echo "üåê Configurando red Docker..."
                    
                    // Verificar si la red existe
                    def networkExists = sh(
                        script: "docker network ls -q -f name=${NETWORK_NAME}",
                        returnStdout: true
                    ).trim()
                    
                    if (networkExists) {
                        echo "üîÑ Red ${NETWORK_NAME} ya existe, la mantenemos"
                    } else {
                        echo "‚ûï Creando red ${NETWORK_NAME}"
                        sh "docker network create ${NETWORK_NAME}"
                    }
                    
                    // Mostrar informaci√≥n de la red
                    sh "docker network inspect ${NETWORK_NAME} --format '{{.Name}}: {{.Id}}'"
                }
            }
        }
        
        stage('Create Redis Container') {
            steps {
                script {
                    echo "üî¥ Creando contenedor Redis..."
                    sh """
                        docker create --name redis \
                            --network ${NETWORK_NAME} \
                            -p 6379:6379 \
                            redis:7-alpine \
                            redis-server --appendonly yes
                    """
                    
                    // Verificar que se cre√≥ correctamente
                    sh "docker inspect redis --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Redis container creado correctamente"
                }
            }
        }
        
        stage('Create Auth API Container') {
            steps {
                script {
                    echo "üîê Creando contenedor Auth API..."
                    sh """
                        docker create --name auth-api \
                            --network ${NETWORK_NAME} \
                            -p ${AUTH_API_PORT}:8000 \
                            -e AUTH_API_PORT=8000 \
                            -e USERS_API_ADDRESS=http://users-api:8083 \
                            -e JWT_SECRET=${JWT_SECRET} \
                            ${REGISTRY_PREFIX}/auth-api:latest
                    """
                    
                    sh "docker inspect auth-api --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Auth API container creado correctamente"
                }
            }
        }
        
        stage('Create Users API Container') {
            steps {
                script {
                    echo "üë• Creando contenedor Users API..."
                    sh """
                        docker create --name users-api \
                            --network ${NETWORK_NAME} \
                            -p ${USERS_API_PORT}:8083 \
                            -e SERVER_PORT=8083 \
                            -e JWT_SECRET=${JWT_SECRET} \
                            ${REGISTRY_PREFIX}/users-api:latest
                    """
                    
                    sh "docker inspect users-api --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Users API container creado correctamente"
                }
            }
        }
        
        stage('Create Todos API Container') {
            steps {
                script {
                    echo "üìù Creando contenedor Todos API..."
                    sh """
                        docker create --name todos-api \
                            --network ${NETWORK_NAME} \
                            -p ${TODOS_API_PORT}:8082 \
                            -e TODO_API_PORT=8082 \
                            -e JWT_SECRET=${JWT_SECRET} \
                            -e REDIS_HOST=${REDIS_HOST} \
                            -e REDIS_PORT=${REDIS_PORT} \
                            -e REDIS_CHANNEL=${REDIS_CHANNEL} \
                            ${REGISTRY_PREFIX}/todos-api:latest
                    """
                    
                    sh "docker inspect todos-api --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Todos API container creado correctamente"
                }
            }
        }
        
        stage('Create Log Message Processor Container') {
            steps {
                script {
                    echo "üìä Creando contenedor Log Message Processor..."
                    sh """
                        docker create --name log-message-processor \
                            --network ${NETWORK_NAME} \
                            -e REDIS_HOST=${REDIS_HOST} \
                            -e REDIS_PORT=${REDIS_PORT} \
                            -e REDIS_CHANNEL=${REDIS_CHANNEL} \
                            ${REGISTRY_PREFIX}/log-message-processor:latest
                    """
                    
                    sh "docker inspect log-message-processor --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Log Processor container creado correctamente"
                }
            }
        }
        
        stage('Create Frontend Container') {
            steps {
                script {
                    echo "üñ•Ô∏è Creando contenedor Frontend..."
                    sh """
                        docker create --name frontend \
                            --network ${NETWORK_NAME} \
                            -p ${FRONTEND_PORT}:8080 \
                            -e PORT=8080 \
                            -e AUTH_API_ADDRESS=http://localhost:${AUTH_API_PORT} \
                            -e TODOS_API_ADDRESS=http://localhost:${TODOS_API_PORT} \
                            ${REGISTRY_PREFIX}/frontend:latest
                    """
                    
                    sh "docker inspect frontend --format '{{.Name}}: {{.State.Status}}'"
                    echo "‚úÖ Frontend container creado correctamente"
                }
            }
        }
        
        stage('Verify All Containers Created') {
            steps {
                script {
                    echo "üîç Verificando que todos los contenedores se crearon..."
                    
                    sh """
                        echo "üìä Estado de todos los contenedores:"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep -E "(redis|auth-api|users-api|todos-api|log-message-processor|frontend)"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    """
                    
                    def containers = ['redis', 'auth-api', 'users-api', 'todos-api', 'log-message-processor', 'frontend']
                    
                    containers.each { container ->
                        def exists = sh(
                            script: "docker ps -aq -f name=${container}",
                            returnStdout: true
                        ).trim()
                        
                        if (exists) {
                            echo "‚úÖ ${container}: Creado correctamente"
                        } else {
                            error("‚ùå ${container}: No se pudo crear")
                        }
                    }
                    
                    echo "‚úÖ Todos los contenedores creados exitosamente!"
                }
            }
        }
    }
    
    post {
        success {
            echo """
            üéâ ¬°CONTENEDORES CREADOS EXITOSAMENTE!
            
            üì¶ Contenedores creados:
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            üî¥ redis              (Puerto: 6379)
            üîê auth-api           (Puerto: ${AUTH_API_PORT})
            üë• users-api          (Puerto: ${USERS_API_PORT})
            üìù todos-api          (Puerto: ${TODOS_API_PORT})
            üìä log-message-processor
            üñ•Ô∏è frontend           (Puerto: ${FRONTEND_PORT})
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            
            üåê Red Docker: ${NETWORK_NAME}
            
            ‚ö° Estado actual: CREADOS (no iniciados)
            
            ‚û°Ô∏è Pr√≥ximo paso: Ejecutar Jenkinsfile-Start para iniciar servicios
            """
            
            script {
                sh """
                    echo "üìä Resumen de contenedores:"
                    docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}" | head -7
                """
            }
        }
        
        failure {
            echo """
            ‚ùå FALL√ì LA CREACI√ìN DE CONTENEDORES
            
            üßπ Limpiando contenedores parciales...
            """
            script {
                sh """
                    # Limpiar contenedores que se pudieron haber creado parcialmente
                    docker rm redis auth-api users-api todos-api log-message-processor frontend 2>/dev/null || true
                    
                    echo "üìä Estado actual:"
                    docker ps -a | head -5
                """
            }
        }
    }
}