pipeline {
    agent any
    
    environment {
        // Network name
        NETWORK_NAME = 'microservice-network'
        
        // Lista de contenedores de la aplicaci√≥n
        CONTAINERS = 'frontend todos-api log-message-processor users-api auth-api redis'
        
        // Lista de im√°genes de la aplicaci√≥n
        IMAGES = 'frontend todos-api log-message-processor users-api auth-api'
    }
    
    stages {
        stage('Stop Services') {
            steps {
                script {
                    echo "Deteniendo todos los servicios..."
                    
                    // Detener contenedores uno por uno para mejor control
                    def containers = ['frontend', 'todos-api', 'log-message-processor', 'users-api', 'auth-api', 'redis']
                    
                    containers.each { container ->
                        try {
                            echo "Deteniendo ${container}..."
                            sh "docker stop ${container}"
                            echo "‚úÖ ${container} detenido correctamente"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è ${container} no estaba ejecut√°ndose o ya fue detenido"
                        }
                    }
                }
            }
        }
        
        stage('Remove Containers') {
            steps {
                script {
                    echo "Removiendo contenedores..."
                    
                    def containers = ['frontend', 'todos-api', 'log-message-processor', 'users-api', 'auth-api', 'redis']
                    
                    containers.each { container ->
                        try {
                            echo "Removiendo contenedor ${container}..."
                            sh "docker rm ${container}"
                            echo "‚úÖ Contenedor ${container} removido correctamente"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Contenedor ${container} no existe o ya fue removido"
                        }
                    }
                }
            }
        }
        
        stage('Remove Images') {
            steps {
                script {
                    echo "Removiendo im√°genes de Docker..."
                    
                    def images = ['frontend', 'todos-api', 'log-message-processor', 'users-api', 'auth-api']
                    
                    images.each { image ->
                        try {
                            echo "Removiendo imagen ${image}..."
                            sh "docker rmi ${image}"
                            echo "‚úÖ Imagen ${image} removida correctamente"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Imagen ${image} no existe o est√° siendo usada por otro contenedor"
                        }
                    }
                }
            }
        }
        
        stage('Remove Network') {
            steps {
                script {
                    echo "Removiendo red de Docker..."
                    try {
                        sh "docker network rm ${NETWORK_NAME}"
                        echo "‚úÖ Red ${NETWORK_NAME} removida correctamente"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Red ${NETWORK_NAME} no existe o ya fue removida"
                    }
                }
            }
        }
        
        stage('Clean Up Volumes') {
            steps {
                script {
                    echo "Limpiando vol√∫menes no utilizados..."
                    try {
                        sh "docker volume prune -f"
                        echo "‚úÖ Vol√∫menes no utilizados limpiados"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error al limpiar vol√∫menes: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('System Cleanup') {
            steps {
                script {
                    echo "Realizando limpieza general del sistema Docker..."
                    try {
                        // Limpiar contenedores detenidos, redes no utilizadas, im√°genes colgantes
                        sh "docker system prune -f"
                        echo "‚úÖ Limpieza general completada"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error en limpieza general: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Verification') {
            steps {
                script {
                    echo "Verificando que todos los servicios hayan sido removidos..."
                    
                    // Verificar que no hay contenedores corriendo
                    def runningContainers = sh(
                        script: "docker ps --format '{{.Names}}' | grep -E '(frontend|todos-api|log-message-processor|users-api|auth-api|redis)' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (runningContainers) {
                        echo "‚ö†Ô∏è A√∫n hay contenedores ejecut√°ndose: ${runningContainers}"
                        error("No todos los contenedores fueron detenidos correctamente")
                    } else {
                        echo "‚úÖ No hay contenedores de la aplicaci√≥n ejecut√°ndose"
                    }
                    
                    // Verificar que la red fue removida
                    def networkExists = sh(
                        script: "docker network ls | grep ${NETWORK_NAME} || true",
                        returnStdout: true
                    ).trim()
                    
                    if (networkExists) {
                        echo "‚ö†Ô∏è La red ${NETWORK_NAME} a√∫n existe"
                    } else {
                        echo "‚úÖ La red ${NETWORK_NAME} fue removida correctamente"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo """
            ‚úÖ Destrucci√≥n completada exitosamente!
            
            Todos los servicios han sido detenidos y removidos:
            ‚ùå Frontend
            ‚ùå Todos API  
            ‚ùå Log Message Processor
            ‚ùå Users API
            ‚ùå Auth API
            ‚ùå Redis
            ‚ùå Red Docker: ${NETWORK_NAME}
            
            El sistema est√° limpio y listo para un nuevo despliegue.
            """
        }
        
        failure {
            echo """
            ‚ö†Ô∏è La destrucci√≥n tuvo algunos problemas.
            
            Puede que algunos recursos no hayan sido removidos completamente.
            Verifica manualmente con:
            - docker ps -a
            - docker images
            - docker network ls
            
            Si es necesario, ejecuta manualmente:
            - docker stop \$(docker ps -aq)
            - docker system prune -af
            """
        }
        
        always {
            echo "üßπ Pipeline de destrucci√≥n finalizado"
        }
    }
}