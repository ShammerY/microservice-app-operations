pipeline {
    agent any
    
    environment {
        // Network name
        NETWORK_NAME = 'microservice-network'
        REGISTRY_PREFIX = 'microservices'
    }
    
    parameters {
        choice(
            name: 'DESTRUCTION_LEVEL',
            choices: ['CONTAINERS_ONLY', 'CONTAINERS_AND_IMAGES', 'FULL_CLEANUP'],
            description: 'Nivel de destrucci√≥n a realizar'
        )
        booleanParam(
            name: 'FORCE_REMOVAL',
            defaultValue: false,
            description: 'Forzar remoci√≥n de contenedores (kill -9)'
        )
    }
    
    stages {
        stage('Destruction Planning') {
            steps {
                script {
                    echo "üéØ Planificando destrucci√≥n..."
                    echo "üìã Nivel seleccionado: ${params.DESTRUCTION_LEVEL}"
                    echo "‚ö° Forzar remoci√≥n: ${params.FORCE_REMOVAL}"
                    
                    // Mostrar estado actual
                    sh """
                        echo "üìä Estado actual del sistema:"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        echo "Contenedores corriendo:"
                        docker ps --format "table {{.Names}}\\t{{.Status}}" | grep -E "(redis|auth-api|users-api|todos-api|log-message-processor|frontend)" || echo "Ninguno"
                        echo ""
                        echo "Contenedores detenidos:" 
                        docker ps -a --format "table {{.Names}}\\t{{.Status}}" | grep -E "(redis|auth-api|users-api|todos-api|log-message-processor|frontend)" || echo "Ninguno"
                        echo ""
                        echo "Im√°genes disponibles:"
                        docker images | grep ${REGISTRY_PREFIX} || echo "Ninguna"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    """
                }
            }
        }
        
        stage('Stop Services') {
            steps {
                script {
                    echo "üõë Deteniendo todos los servicios..."
                    
                    def containers = ['frontend', 'todos-api', 'log-message-processor', 'users-api', 'auth-api', 'redis']
                    
                    containers.each { container ->
                        try {
                            def isRunning = sh(
                                script: "docker ps -q -f name=${container}",
                                returnStdout: true
                            ).trim()
                            
                            if (isRunning) {
                                if (params.FORCE_REMOVAL) {
                                    echo "üí• Forzando detenci√≥n de ${container}..."
                                    sh "docker kill ${container}"
                                } else {
                                    echo "üõë Deteniendo ${container} gracefully..."
                                    sh "timeout 30s docker stop ${container} || docker kill ${container}"
                                }
                                echo "‚úÖ ${container} detenido correctamente"
                            } else {
                                echo "‚èπÔ∏è ${container} ya estaba detenido"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Error deteniendo ${container}: ${e.getMessage()}"
                        }
                    }
                    
                    echo "‚úÖ Todos los servicios han sido detenidos"
                }
            }
        }
        
        stage('Remove Containers') {
            steps {
                script {
                    echo "üóëÔ∏è Removiendo contenedores..."
                    
                    def containers = ['frontend', 'todos-api', 'log-message-processor', 'users-api', 'auth-api', 'redis']
                    
                    containers.each { container ->
                        try {
                            def exists = sh(
                                script: "docker ps -aq -f name=${container}",
                                returnStdout: true
                            ).trim()
                            
                            if (exists) {
                                echo "üóëÔ∏è Removiendo contenedor ${container}..."
                                
                                if (params.FORCE_REMOVAL) {
                                    sh "docker rm -f ${container}"
                                } else {
                                    sh "docker rm ${container}"
                                }
                                echo "‚úÖ Contenedor ${container} removido correctamente"
                            } else {
                                echo "üì≠ Contenedor ${container} no existe"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Error removiendo ${container}: ${e.getMessage()}"
                        }
                    }
                    
                    echo "‚úÖ Todos los contenedores han sido removidos"
                }
            }
        }
        
        stage('Remove Images') {
            when {
                anyOf {
                    expression { params.DESTRUCTION_LEVEL == 'CONTAINERS_AND_IMAGES' }
                    expression { params.DESTRUCTION_LEVEL == 'FULL_CLEANUP' }
                }
            }
            steps {
                script {
                    echo "üñºÔ∏è Removiendo im√°genes Docker..."
                    
                    def services = ['auth-api', 'users-api', 'todos-api', 'log-message-processor', 'frontend']
                    
                    services.each { service ->
                        try {
                            // Remover imagen latest
                            def imageExists = sh(
                                script: "docker images -q ${REGISTRY_PREFIX}/${service}:latest",
                                returnStdout: true
                            ).trim()
                            
                            if (imageExists) {
                                echo "üóëÔ∏è Removiendo imagen ${REGISTRY_PREFIX}/${service}:latest..."
                                sh "docker rmi ${REGISTRY_PREFIX}/${service}:latest"
                                echo "‚úÖ Imagen ${service} removida correctamente"
                            } else {
                                echo "üì≠ Imagen ${service} no existe"
                            }
                            
                            // Remover otras versiones con tag num√©rico
                            sh """
                                echo "üîç Buscando otras versiones de ${service}..."
                                docker images | grep "${REGISTRY_PREFIX}/${service}" | awk '{print \$1\":\"\$2}' | xargs -r docker rmi || echo "No hay otras versiones"
                            """
                            
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Error removiendo imagen ${service}: ${e.getMessage()}"
                        }
                    }
                    
                    echo "‚úÖ Todas las im√°genes han sido procesadas"
                }
            }
        }
        
        stage('Remove Network') {
            steps {
                script {
                    echo "üåê Removiendo red de Docker..."
                    try {
                        def networkExists = sh(
                            script: "docker network ls -q -f name=${NETWORK_NAME}",
                            returnStdout: true
                        ).trim()
                        
                        if (networkExists) {
                            echo "üóëÔ∏è Removiendo red ${NETWORK_NAME}..."
                            sh "docker network rm ${NETWORK_NAME}"
                            echo "‚úÖ Red ${NETWORK_NAME} removida correctamente"
                        } else {
                            echo "üì≠ Red ${NETWORK_NAME} no existe"
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error removiendo red: ${e.getMessage()}"
                        echo "Esto puede suceder si hay contenedores a√∫n conectados a la red"
                    }
                }
            }
        }
        
        stage('Advanced Cleanup') {
            when {
                expression { params.DESTRUCTION_LEVEL == 'FULL_CLEANUP' }
            }
            steps {
                script {
                    echo "üßπ Realizando limpieza avanzada del sistema..."
                    
                    try {
                        echo "üóëÔ∏è Limpiando vol√∫menes no utilizados..."
                        sh "docker volume prune -f"
                        
                        echo "üóëÔ∏è Limpiando im√°genes hu√©rfanas..."
                        sh "docker image prune -f"
                        
                        echo "üóëÔ∏è Limpiando contenedores detenidos..."
                        sh "docker container prune -f"
                        
                        echo "üóëÔ∏è Limpieza general del sistema..."
                        sh "docker system prune -f"
                        
                        echo "‚úÖ Limpieza avanzada completada"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error en limpieza avanzada: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Final Verification') {
            steps {
                script {
                    echo "üîç Verificando que la destrucci√≥n fue exitosa..."
                    
                    // Verificar contenedores
                    def runningContainers = sh(
                        script: "docker ps --format '{{.Names}}' | grep -E '(frontend|todos-api|log-message-processor|users-api|auth-api|redis)' || true",
                        returnStdout: true
                    ).trim()
                    
                    def allContainers = sh(
                        script: "docker ps -a --format '{{.Names}}' | grep -E '(frontend|todos-api|log-message-processor|users-api|auth-api|redis)' || true",
                        returnStdout: true
                    ).trim()
                    
                    if (runningContainers) {
                        echo "‚ö†Ô∏è A√∫n hay contenedores corriendo: ${runningContainers}"
                    } else {
                        echo "‚úÖ No hay contenedores de microservicios corriendo"
                    }
                    
                    if (allContainers) {
                        echo "‚ö†Ô∏è A√∫n existen contenedores: ${allContainers}"
                    } else {
                        echo "‚úÖ No existen contenedores de microservicios"
                    }
                    
                    // Verificar im√°genes si se pidi√≥ removerlas
                    if (params.DESTRUCTION_LEVEL != 'CONTAINERS_ONLY') {
                        def remainingImages = sh(
                            script: "docker images | grep ${REGISTRY_PREFIX} || true",
                            returnStdout: true
                        ).trim()
                        
                        if (remainingImages) {
                            echo "‚ö†Ô∏è A√∫n quedan im√°genes:"
                            sh "docker images | grep ${REGISTRY_PREFIX}"
                        } else {
                            echo "‚úÖ No quedan im√°genes de microservicios"
                        }
                    }
                    
                    // Verificar red
                    def networkExists = sh(
                        script: "docker network ls | grep ${NETWORK_NAME} || true",
                        returnStdout: true
                    ).trim()
                    
                    if (networkExists) {
                        echo "‚ö†Ô∏è La red ${NETWORK_NAME} a√∫n existe"
                    } else {
                        echo "‚úÖ La red ${NETWORK_NAME} fue removida correctamente"
                    }
                    
                    // Mostrar estado final del sistema
                    sh """
                        echo ""
                        echo "üìä Estado final del sistema Docker:"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        echo "Contenedores activos: \$(docker ps | wc -l) (incluyendo header)"
                        echo "Contenedores totales: \$(docker ps -a | wc -l) (incluyendo header)"
                        echo "Im√°genes totales: \$(docker images | wc -l) (incluyendo header)"
                        echo "Redes: \$(docker network ls | wc -l) (incluyendo header)"
                        echo "Vol√∫menes: \$(docker volume ls | wc -l) (incluyendo header)"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        
                        echo "üíæ Uso de espacio en disco:"
                        docker system df
                    """
                }
            }
        }
    }
    
    post {
        success {
            script {
                def destructionSummary = ""
                switch(params.DESTRUCTION_LEVEL) {
                    case 'CONTAINERS_ONLY':
                        destructionSummary = "üóëÔ∏è Contenedores removidos, im√°genes conservadas"
                        break
                    case 'CONTAINERS_AND_IMAGES':
                        destructionSummary = "üóëÔ∏è Contenedores e im√°genes removidos"
                        break
                    case 'FULL_CLEANUP':
                        destructionSummary = "üóëÔ∏è Limpieza completa del sistema"
                        break
                }
                
                echo """
                üéâ ¬°DESTRUCCI√ìN COMPLETADA EXITOSAMENTE!
                
                ${destructionSummary}
                
                üìä Elementos procesados:
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                ‚ùå Redis                 ‚Üí Detenido y removido
                ‚ùå Auth API              ‚Üí Detenido y removido
                ‚ùå Users API             ‚Üí Detenido y removido  
                ‚ùå Todos API             ‚Üí Detenido y removido
                ‚ùå Log Message Processor ‚Üí Detenido y removido
                ‚ùå Frontend              ‚Üí Detenido y removido
                ‚ùå Red: ${NETWORK_NAME}   ‚Üí Removida
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                
                ‚ú® El sistema est√° limpio y listo para un nuevo despliegue.
                
                üîÑ Para volver a desplegar:
                1. Jenkinsfile-Build    ‚Üí Construir im√°genes
                2. Jenkinsfile-Create   ‚Üí Crear contenedores  
                3. Jenkinsfile-Start    ‚Üí Iniciar servicios
                
                üí° Tip: Usa CONTAINERS_ONLY si quieres mantener las im√°genes para deployments m√°s r√°pidos
                """
            }
        }
        
        failure {
            echo """
            ‚ö†Ô∏è LA DESTRUCCI√ìN TUVO ALGUNOS PROBLEMAS
            
            Algunos recursos pueden no haber sido removidos completamente.
            
            üîß Comandos para limpieza manual:
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            docker stop \$(docker ps -aq)                    # Detener todo
            docker rm \$(docker ps -aq)                      # Remover contenedores
            docker rmi \$(docker images -q)                  # Remover im√°genes  
            docker network prune -f                          # Limpiar redes
            docker system prune -af                          # Limpieza total
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            
            ‚ö†Ô∏è CUIDADO: Los comandos anteriores afectar√°n TODOS los contenedores e im√°genes Docker
            """
        }
        
        always {
            echo "üèÅ Pipeline de destrucci√≥n finalizado"
        }
    }
}