pipeline {
    agent any
    
    environment {
        // Variables de configuraci√≥n
        AUTH_API_PORT = '8000'
        USERS_API_PORT = '8083'
        TODOS_API_PORT = '8082'
        FRONTEND_PORT = '8080'
    }
    
    stages {
        stage('Verify Containers Exist') {
            steps {
                script {
                    echo "üîç Verificando que los contenedores existan..."
                    
                    def containers = ['redis', 'auth-api', 'users-api', 'todos-api', 'log-message-processor', 'frontend']
                    def missingContainers = []
                    
                    containers.each { container ->
                        def exists = sh(
                            script: "docker ps -aq -f name=${container}",
                            returnStdout: true
                        ).trim()
                        
                        if (exists) {
                            // Verificar el estado actual
                            def status = sh(
                                script: "docker inspect ${container} --format '{{.State.Status}}'",
                                returnStdout: true
                            ).trim()
                            
                            echo "‚úÖ ${container}: Existe (Estado: ${status})"
                        } else {
                            echo "‚ùå ${container}: No existe"
                            missingContainers.add(container)
                        }
                    }
                    
                    if (missingContainers.size() > 0) {
                        error("‚ùå Faltan los siguientes contenedores: ${missingContainers.join(', ')}. Ejecuta Jenkinsfile-Create primero.")
                    }
                    
                    echo "‚úÖ Todos los contenedores est√°n disponibles!"
                }
            }
        }
        
        stage('Stop Running Containers') {
            steps {
                script {
                    echo "üõë Deteniendo contenedores que puedan estar corriendo..."
                    
                    def containers = ['redis', 'auth-api', 'users-api', 'todos-api', 'log-message-processor', 'frontend']
                    
                    containers.each { container ->
                        def isRunning = sh(
                            script: "docker ps -q -f name=${container}",
                            returnStdout: true
                        ).trim()
                        
                        if (isRunning) {
                            echo "üõë Deteniendo: ${container}"
                            sh "docker stop ${container}"
                        } else {
                            echo "‚èπÔ∏è ${container}: Ya est√° detenido"
                        }
                    }
                    
                    echo "‚úÖ Todos los contenedores est√°n detenidos"
                }
            }
        }
        
        stage('Start Redis') {
            steps {
                script {
                    echo "üî¥ Iniciando Redis..."
                    sh "docker start redis"
                    
                    echo "‚è≥ Esperando que Redis se inicialice..."
                    sleep(5)
                    
                    // Verificar que Redis est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=redis",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Redis iniciado correctamente"
                        sh "docker logs redis --tail 3"
                    } else {
                        error("‚ùå Redis fall√≥ al iniciar")
                    }
                }
            }
        }
        
        stage('Start Auth API') {
            steps {
                script {
                    echo "üîê Iniciando Auth API..."
                    sh "docker start auth-api"
                    
                    echo "‚è≥ Esperando que Auth API se inicialice..."
                    sleep(10)
                    
                    // Verificar que Auth API est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=auth-api",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Auth API iniciado correctamente"
                        
                        // Intentar health check
                        def healthCheck = sh(
                            script: "curl -f http://localhost:${AUTH_API_PORT}/version || echo 'Health check failed'",
                            returnStdout: true
                        ).trim()
                        
                        echo "üîç Health check: ${healthCheck}"
                    } else {
                        echo "‚ùå Auth API fall√≥ al iniciar"
                        sh "docker logs auth-api --tail 10"
                        error("Auth API startup failed")
                    }
                }
            }
        }
        
        stage('Start Users API') {
            steps {
                script {
                    echo "üë• Iniciando Users API..."
                    sh "docker start users-api"
                    
                    echo "‚è≥ Esperando que Users API se inicialice..."
                    sleep(15)
                    
                    // Verificar que Users API est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=users-api",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Users API iniciado correctamente"
                        sh "docker logs users-api --tail 5"
                    } else {
                        echo "‚ùå Users API fall√≥ al iniciar"
                        sh "docker logs users-api --tail 10"
                        error("Users API startup failed")
                    }
                }
            }
        }
        
        stage('Start Todos API') {
            steps {
                script {
                    echo "üìù Iniciando Todos API..."
                    sh "docker start todos-api"
                    
                    echo "‚è≥ Esperando que Todos API se inicialice..."
                    sleep(10)
                    
                    // Verificar que Todos API est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=todos-api",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Todos API iniciado correctamente"
                        sh "docker logs todos-api --tail 5"
                    } else {
                        echo "‚ùå Todos API fall√≥ al iniciar"
                        sh "docker logs todos-api --tail 10"
                        error("Todos API startup failed")
                    }
                }
            }
        }
        
        stage('Start Log Message Processor') {
            steps {
                script {
                    echo "üìä Iniciando Log Message Processor..."
                    sh "docker start log-message-processor"
                    
                    echo "‚è≥ Esperando que Log Processor se inicialice..."
                    sleep(5)
                    
                    // Verificar que Log Processor est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=log-message-processor",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Log Message Processor iniciado correctamente"
                        sh "docker logs log-message-processor --tail 3"
                    } else {
                        echo "‚ùå Log Message Processor fall√≥ al iniciar"
                        sh "docker logs log-message-processor --tail 10"
                        error("Log Message Processor startup failed")
                    }
                }
            }
        }
        
        stage('Start Frontend') {
            steps {
                script {
                    echo "üñ•Ô∏è Iniciando Frontend..."
                    sh "docker start frontend"
                    
                    echo "‚è≥ Esperando que Frontend se inicialice..."
                    sleep(10)
                    
                    // Verificar que Frontend est√° corriendo
                    def isRunning = sh(
                        script: "docker ps -q -f name=frontend",
                        returnStdout: true
                    ).trim()
                    
                    if (isRunning) {
                        echo "‚úÖ Frontend iniciado correctamente"
                        
                        // Intentar health check
                        def healthCheck = sh(
                            script: "curl -f http://localhost:${FRONTEND_PORT}/ -o /dev/null -w '%{http_code}' || echo 'Health check failed'",
                            returnStdout: true
                        ).trim()
                        
                        echo "üîç Frontend health check: ${healthCheck}"
                    } else {
                        echo "‚ùå Frontend fall√≥ al iniciar"
                        sh "docker logs frontend --tail 10"
                        error("Frontend startup failed")
                    }
                }
            }
        }
        
        stage('Final Health Check') {
            steps {
                script {
                    echo "üè• Realizando verificaci√≥n final de salud de todos los servicios..."
                    
                    // Mostrar estado de todos los contenedores
                    sh """
                        echo "üìä Estado final de todos los servicios:"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                        docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep -E "(redis|auth-api|users-api|todos-api|log-message-processor|frontend)"
                        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    """
                    
                    // Health checks espec√≠ficos
                    echo "üîç Ejecutando health checks..."
                    
                    // Redis
                    def redisCheck = sh(
                        script: "docker exec redis redis-cli ping 2>/dev/null || echo 'FAIL'",
                        returnStdout: true
                    ).trim()
                    echo "üî¥ Redis: ${redisCheck == 'PONG' ? '‚úÖ OK' : '‚ùå FAIL'}"
                    
                    // Auth API
                    def authCheck = sh(
                        script: "curl -f -s http://localhost:${AUTH_API_PORT}/version || echo 'FAIL'",
                        returnStdout: true
                    ).trim()
                    echo "üîê Auth API: ${authCheck.contains('Auth API') ? '‚úÖ OK' : '‚ùå FAIL'}"
                    
                    // Frontend
                    def frontendCheck = sh(
                        script: "curl -f -s -o /dev/null -w '%{http_code}' http://localhost:${FRONTEND_PORT}/ || echo 'FAIL'",
                        returnStdout: true
                    ).trim()
                    echo "üñ•Ô∏è Frontend: ${frontendCheck == '200' ? '‚úÖ OK' : '‚ùå FAIL'}"
                    
                    // Verificar logs por errores cr√≠ticos
                    echo "üìã Revisando logs por errores cr√≠ticos..."
                    sh """
                        echo "üîç √öltimos logs de cada servicio:"
                        echo "--- Auth API ---"
                        docker logs auth-api --tail 3 2>/dev/null || echo "No logs available"
                        echo "--- Users API ---" 
                        docker logs users-api --tail 3 2>/dev/null || echo "No logs available"
                        echo "--- Todos API ---"
                        docker logs todos-api --tail 3 2>/dev/null || echo "No logs available"
                    """
                }
            }
        }
        
        stage('Service Discovery Check') {
            steps {
                script {
                    echo "üåê Verificando conectividad entre servicios..."
                    
                    // Verificar que los servicios pueden comunicarse entre s√≠ a trav√©s de la red Docker
                    try {
                        sh """
                            echo "üîç Probando conectividad interna:"
                            docker exec auth-api ping -c 1 users-api >/dev/null && echo "‚úÖ Auth API -> Users API: OK" || echo "‚ùå Auth API -> Users API: FAIL"
                            docker exec todos-api ping -c 1 redis >/dev/null && echo "‚úÖ Todos API -> Redis: OK" || echo "‚ùå Todos API -> Redis: FAIL"
                            docker exec log-message-processor ping -c 1 redis >/dev/null && echo "‚úÖ Log Processor -> Redis: OK" || echo "‚ùå Log Processor -> Redis: FAIL"
                        """
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Algunos checks de conectividad fallaron, pero los servicios pueden estar funcionando"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo """
            üéâ ¬°TODOS LOS SERVICIOS INICIADOS EXITOSAMENTE!
            
            üöÄ Servicios activos:
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            üî¥ Redis              ‚Üí localhost:6379             [Base de datos]
            üîê Auth API           ‚Üí http://localhost:${AUTH_API_PORT}     [Autenticaci√≥n]  
            üë• Users API          ‚Üí http://localhost:${USERS_API_PORT}     [Gesti√≥n de usuarios]
            üìù Todos API          ‚Üí http://localhost:${TODOS_API_PORT}     [Gesti√≥n de tareas]
            üìä Log Processor      ‚Üí [Procesamiento de logs]
            üñ•Ô∏è Frontend           ‚Üí http://localhost:${FRONTEND_PORT}     [Interfaz de usuario]
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            
            üåü ¬°LA APLICACI√ìN EST√Å LISTA PARA USAR!
            
            üì± Accede a la aplicaci√≥n: http://localhost:${FRONTEND_PORT}
            
            üîë Usuarios de prueba:
            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            üìã admin / admin    (Administrador)
            üìã johnd / foo      (Usuario)  
            üìã janed / ddd      (Usuario)
            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            
            üõ†Ô∏è Comandos √∫tiles:
            ‚Ä¢ Ver logs: docker logs <service-name>
            ‚Ä¢ Estado: docker ps
            ‚Ä¢ Detener todos: Ejecutar Jenkinsfile-Destroy
            
            üí° Flujo de trabajo completo:
            1. ‚úÖ Build    (Jenkinsfile-Build)    ‚Üí Crear im√°genes  
            2. ‚úÖ Create   (Jenkinsfile-Create)   ‚Üí Crear contenedores
            3. ‚úÖ Start    (Jenkinsfile-Start)    ‚Üí Iniciar servicios
            4. üîÑ Destroy  (Jenkinsfile-Destroy) ‚Üí Limpiar todo
            """
            
            script {
                sh """
                    echo ""
                    echo "üìä Resumen final del sistema:"
                    echo "Contenedores corriendo: \$(docker ps | grep -E '(redis|auth-api|users-api|todos-api|log-message-processor|frontend)' | wc -l)/6"
                    echo "Uso de memoria:"
                    docker stats --no-stream --format "table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}" | head -7
                """
            }
        }
        
        failure {
            echo """
            ‚ùå FALL√ì EL INICIO DE LOS SERVICIOS
            
            üîç Servicios que pueden estar fallando:
            """
            
            script {
                sh """
                    echo "üìä Estado actual de contenedores:"
                    docker ps -a --format "table {{.Names}}\\t{{.Status}}" | grep -E "(redis|auth-api|users-api|todos-api|log-message-processor|frontend)"
                    
                    echo ""
                    echo "üîç Logs de servicios que fallaron:"
                    for service in redis auth-api users-api todos-api log-message-processor frontend; do
                        if ! docker ps -q -f name=\$service | grep -q .; then
                            echo "--- \$service (FAILED) ---"
                            docker logs \$service --tail 5 2>/dev/null || echo "No logs available"
                            echo ""
                        fi
                    done
                """
            }
            
            echo """
            
            üõ†Ô∏è Pasos para diagnosticar:
            1. Revisar logs: docker logs <service-name>
            2. Verificar im√°genes: docker images | grep microservices
            3. Verificar contenedores: docker ps -a
            4. Reintentar: Ejecutar este pipeline nuevamente
            
            üîÑ Si el problema persiste:
            ‚Ä¢ Ejecutar Jenkinsfile-Destroy
            ‚Ä¢ Ejecutar Jenkinsfile-Build  
            ‚Ä¢ Ejecutar Jenkinsfile-Create
            ‚Ä¢ Ejecutar Jenkinsfile-Start
            """
        }
    }
}